@page "/sign-up"

<div class="box form-box">
    <header>Регистрация</header>
    <EditForm Model="_model" OnValidSubmit="SubmitFormAsync">
                <DataAnnotationsValidator/>
        <div class="field input">
            <label for="lastname">Ваша фамилия</label>
            <InputText @bind-Value="_model.LastName" type="text" name="lastname" autocomplete="off"/>
            <ValidationMessage For="() => _model.LastName"/>
        </div>
        <div class="field input">
            <label for="firstname">Ваше имя</label>
            <InputText @bind-Value="_model.FirstName" type="text" name="firstname" autocomplete="off"/>
            <ValidationMessage For="() => _model.FirstName"/>
        </div>

        <div class="field input">
            <label for="phone-number">Номер телефона</label>
            <InputText @bind-Value="_model.PhoneNumber" type="phone" name="phone-number" autocomplete="off"/>
            <ValidationMessage For="() => _model.PhoneNumber"/>
        </div>

        <div class="field input">
            <label for="email">Эл. почта</label>
            <InputText @bind-Value="_model.Email" type="email" name="email" autocomplete="off"/>
            <ValidationMessage For="() => _model.Email"/>
        </div>

        <div class="field input">
            <label for="password">Пароль</label>
            <InputText @bind-Value="_model.Password" type="password" name="password" autocomplete="off"/>
            <ValidationMessage For="() => _model.Password"/>
        </div>

        <div class="field input">
            <label for="confirm-password">Подтверждение пароля</label>
            <InputText @bind-Value="_model.ConfirmPassword" type="password" name="confirm-password" autocomplete="off"/>
            <ValidationMessage For="() => _model.ConfirmPassword"/>
        </div>

        <div class="field submit">
            <input type="submit" class="btn" value="Зарегистрироваться">
        </div>
    </EditForm>
</div>

@code {
    [Inject] IUserManager UserManager { get; set; } = null!;
    [Inject] NavigationManager NavigationManager { get; set; } = null!;
    [Inject] IToastService ToastService { get; set; } = null!;
    
    private bool _isBusy;
    private SignUpRequest _model = new SignUpRequest();

    private async Task SubmitFormAsync()
    {
        try
        {
            _isBusy = true;
            
            var result = await UserManager.SignUpAsync(_model);
            if (!result.Succeeded)
            {
                foreach (var message in result.Messages)
                    ToastService.ShowInfo(message);
                return;
            }
            NavigationManager.NavigateTo("/", true,true);
        }
        catch (Exception ex)
        {
            ToastService.ShowError(ex.Message);
        }
        finally
        {
            _isBusy = false;
        }
    }
}